{"version":3,"sources":["component/ListItem.js","component/List.js","App.js","actions/index.js","serviceWorker.js","reducers/index.js","reducers/valueChange.js","store.js","index.js"],"names":["ListItem","_ref","task","remove","isConfirmed","id","handleChecked","react_default","a","createElement","className","concat","key","type","checked","onChange","onClick","List","tasks","map","el","component_ListItem","Fragment","App","state","handleInputValue","event","_this","props","changeValue","currentTarget","value","handleAddTask","preventDefault","valueChange","Object","toConsumableArray","alert","push","setState","handleRemoveTask","filter","onSubmit","this","placeholder","component_List","Component","mapDispatchToProps","text","AppContainer","connect","Boolean","window","location","hostname","match","combineReducers","arguments","length","undefined","action","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93259f57.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst ListItem = ({ task, remove, isConfirmed, id, handleChecked }) => {\r\n    return (\r\n        <li\r\n            className={`liElem ${isConfirmed ? 'active' : ''}`}\r\n            key={id}>\r\n            <input className='checkbox' type=\"checkbox\" checked={isConfirmed} onChange={() => handleChecked(id)} />\r\n            {task}\r\n            <i className=\"fas fa-times\" onClick={() => remove(id)}></i>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ListItem;","import ListItem from './ListItem';\r\nimport React from 'react'\r\n\r\nconst List = ({ tasks, remove, handleChecked }) => {\r\n    const task = tasks.map(el => {\r\n        return <ListItem task={el.task} key={el.id} id={el.id} remove={remove} isConfirmed={el.isConfirmed} handleChecked={handleChecked} />\r\n    })\r\n    return (\r\n        <>\r\n            <ul className='listContainer'>\r\n                {task}\r\n            </ul>\r\n            {/* <div className='filterContainer'>\r\n                <button className='active'>Active</button>\r\n                <button className='all'>All</button>\r\n                <button className='complete'>Complete</button>\r\n            </div> */}\r\n        </>\r\n    )\r\n}\r\nexport default List;","import React, { Component } from 'react';\nimport List from './component/List';\nimport { changeValue } from './actions';\nimport { connect } from 'react-redux';\nimport { reset } from 'redux-form';\n\nconst tasks = [\n  { id: 0, task: 'Wyrzucić śmieci', isConfirmed: false },\n  { id: 1, task: 'Zrobić pranie', isConfirmed: false },\n  { id: 2, task: 'Nakarmić rybki', isConfirmed: false },\n  { id: 3, task: 'Kupić węgiel', isConfirmed: false },\n  { id: 4, task: 'Nauczyć się Redux', isConfirmed: false },\n]\n\nclass App extends Component {\n  state = {\n    //value: '',\n    tasks: [{ id: 0, task: 'Wyrzucić śmieci', isConfirmed: false },\n    { id: 1, task: 'Zrobić pranie', isConfirmed: false },\n    { id: 2, task: 'Nakarmić rybki', isConfirmed: false },\n    { id: 3, task: 'Kupić węgiel', isConfirmed: false },\n    { id: 4, task: 'Nauczyć się Redux', isConfirmed: false },],\n    id: 0\n  }\n  handleInputValue = (event) => {\n    // this.setState({\n    //   value: event.target.value,\n    // })\n    this.props.changeValue(event.currentTarget.value);\n  }\n  handleAddTask = (event) => {\n    event.preventDefault();\n    //const value = this.state.value;\n    let value = this.props.valueChange;\n    const tasks = [...this.state.tasks];\n    if (!value) {\n      return alert('You have to add something');\n    }\n    tasks.push({ id: this.state.id, task: value, isConfirmed: false });\n    this.setState({\n      //value: '',\n      tasks,\n      id: this.state.id + 1,\n    })\n    // this.inputInForm.reset();\n    //this.props.valueChange(reset('inputInForm'));\n    //console.log(this.inputInForm.value);\n  }\n  handleRemoveTask = (id) => {\n    const tasks = [...this.state.tasks].filter(task => task.id !== id);\n    this.setState({\n      tasks\n    })\n  }\n  handleChecked = (id) => {\n    const tasks = this.state.tasks.map(el => {\n      if (id === el.id) {\n        el.isConfirmed = !el.isConfirmed;\n      }\n      return el;\n    })\n    this.setState({\n      tasks\n    })\n  }\n  render() {\n    return (\n      <>\n        <header className='header'><h1>todoList</h1></header>\n        <main className='main'>\n          <form\n            className='formInp'\n            onSubmit={this.handleAddTask}>\n            <input\n              //ref={(ref) => this.inputInForm = ref}\n              className='inputInForm'\n              type=\"text\"\n              placeholder='Add task'\n              value={this.props.valueChange}\n              onChange={this.handleInputValue} />\n            <button className='btnAdd'>ADD</button>\n          </form>\n          <List tasks={this.state.tasks}\n            remove={this.handleRemoveTask}\n            handleChecked={this.handleChecked} />\n        </main>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  //console.log(`Stan w mapStateToProps: ${state.valueChange}`);\n  return {\n    valueChange: state.valueChange\n  }\n}\nconst mapDispatchToProps = { changeValue };\n\nexport const AppContainer = connect(mapStateToProps, mapDispatchToProps)(App);\n\n//export default App;\n","export const changeValue = (text) => ({\r\n    type: 'CHANGE_VALUE',\r\n    text\r\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport { valueChange } from './valueChange';\r\n\r\nexport default combineReducers({\r\n    valueChange,\r\n})","export const valueChange = (state = '', action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE_VALUE':\r\n            //console.log(`Stan w reducerze: ${action.text}`);\r\n            return action.text;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore } from 'redux';\r\nimport reducers from './reducers';\r\n\r\nexport const store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { AppContainer } from './App';\nimport './styles/index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(<Provider store={store}><AppContainer /></Provider>, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}